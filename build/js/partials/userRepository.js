import{userModel}from"./userModel.js";import{renderUser}from"./renderUser.js";export class userRepository{constructor(){this.storage=[],this.options="results=20&nat=us,fr&inc=name,picture,location,email,phone";let e=this;this.getData("https://randomuser.me/api/?",this.options).then(function(t){console.log(JSON.parse(t.responseText).results),e.fillStore(JSON.parse(t.responseText).results);for(const t in e.storage)renderUser.render(e.storage[t],"content")}),console.log(this.storage)}fillStore(e){let t={};for(const r in e)t=new userModel(r,e[r].name.title,e[r].name.first,e[r].name.last,e[r].location.city,e[r].phone,e[r].email,e[r].location.street,e[r].location.state,e[r].picture.medium,e[r].picture.large),this.storage.push(t)}getData(e,t){let r=new XMLHttpRequest;return new Promise(function(s,o){r.onload=(()=>s(r)),r.onerror=(()=>o(new Error("Loading error"))),console.log(e+t),r.open("GET",e+t,!0),r.send()})}getUserById(e){if(this.isUserIdExist(e))return this.storage[e]}isUserIdExist(e){for(let t=0;t<this.storage.length;t++)if(this.storage[t].id==e)return!0}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnRpYWxzL3VzZXJSZXBvc2l0b3J5LmpzIl0sIm5hbWVzIjpbInVzZXJNb2RlbCIsInJlbmRlclVzZXIiLCJ1c2VyUmVwb3NpdG9yeSIsIltvYmplY3QgT2JqZWN0XSIsInRoaXMiLCJzdG9yYWdlIiwib3B0aW9ucyIsInRoYXQiLCJnZXREYXRhIiwidGhlbiIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJyZXN1bHRzIiwiZmlsbFN0b3JlIiwia2V5IiwicmVuZGVyIiwiZGF0YSIsInVzZXJNb2QiLCJuYW1lIiwidGl0bGUiLCJmaXJzdCIsImxhc3QiLCJsb2NhdGlvbiIsImNpdHkiLCJwaG9uZSIsImVtYWlsIiwic3RyZWV0Iiwic3RhdGUiLCJwaWN0dXJlIiwibWVkaXVtIiwibGFyZ2UiLCJwdXNoIiwidXJsIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ubG9hZCIsIm9uZXJyb3IiLCJFcnJvciIsIm9wZW4iLCJzZW5kIiwiaWQiLCJpc1VzZXJJZEV4aXN0IiwiaSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ik9BQVFBLGNBQWdCLHdCQUNoQkMsZUFBaUIseUJBRWxCLE1BQU1DLGVBQ1RDLGNBQ0lDLEtBQUtDLFFBQVUsR0FDZkQsS0FBS0UsUUFBVSw2REFDZixJQUFJQyxFQUFPSCxLQUNYQSxLQUFLSSxRQUFRLDhCQUErQkosS0FBS0UsU0FBU0csS0FBSyxTQUFVQyxHQUNyRUMsUUFBUUMsSUFBSUMsS0FBS0MsTUFBTUosRUFBT0ssY0FBY0MsU0FDNUNULEVBQUtVLFVBQVVKLEtBQUtDLE1BQU1KLEVBQU9LLGNBQWNDLFNBQy9DLElBQUssTUFBTUUsS0FBT1gsRUFBS0YsUUFDbkJKLFdBQVdrQixPQUFPWixFQUFLRixRQUFRYSxHQUFNLGFBSTdDUCxRQUFRQyxJQUFJUixLQUFLQyxTQUdyQkYsVUFBVWlCLEdBQ04sSUFBSUMsRUFBVSxHQUNkLElBQUssTUFBTUgsS0FBT0UsRUFDZEMsRUFBVSxJQUFJckIsVUFBVWtCLEVBQUtFLEVBQUtGLEdBQUtJLEtBQUtDLE1BQU9ILEVBQUtGLEdBQUtJLEtBQUtFLE1BQU9KLEVBQUtGLEdBQUtJLEtBQUtHLEtBQzVETCxFQUFLRixHQUFLUSxTQUFTQyxLQUFNUCxFQUFLRixHQUFLVSxNQUFPUixFQUFLRixHQUFLVyxNQUFPVCxFQUFLRixHQUFLUSxTQUFTSSxPQUM5RVYsRUFBS0YsR0FBS1EsU0FBU0ssTUFBT1gsRUFBS0YsR0FBS2MsUUFBUUMsT0FBUWIsRUFBS0YsR0FBS2MsUUFBUUUsT0FDbEc5QixLQUFLQyxRQUFROEIsS0FBS2QsR0FJMUJsQixRQUFRaUMsRUFBSzlCLEdBQ1QsSUFBSStCLEVBQU0sSUFBSUMsZUFDZCxPQUFPLElBQUlDLFFBQVEsU0FBU0MsRUFBU0MsR0FDakNKLEVBQUlLLE9BQVMsS0FBTUYsRUFBUUgsSUFDM0JBLEVBQUlNLFFBQVUsS0FBTUYsRUFBTyxJQUFJRyxNQUFNLG1CQUNyQ2pDLFFBQVFDLElBQUl3QixFQUFNOUIsR0FDbEIrQixFQUFJUSxLQUFLLE1BQU9ULEVBQU05QixHQUFTLEdBQy9CK0IsRUFBSVMsU0FJWjNDLFlBQVk0QyxHQUNSLEdBQUczQyxLQUFLNEMsY0FBY0QsR0FDbEIsT0FBTzNDLEtBQUtDLFFBQVEwQyxHQUk1QjVDLGNBQWM0QyxHQUNWLElBQUssSUFBSUUsRUFBSSxFQUFHQSxFQUFJN0MsS0FBS0MsUUFBUTZDLE9BQVFELElBQ3JDLEdBQUk3QyxLQUFLQyxRQUFRNEMsR0FBR0YsSUFBTUEsRUFDdEIsT0FBTyIsImZpbGUiOiJwYXJ0aWFscy91c2VyUmVwb3NpdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXNlck1vZGVsfSBmcm9tICcuL3VzZXJNb2RlbC5qcyc7XHJcbmltcG9ydCB7cmVuZGVyVXNlcn0gZnJvbSAnLi9yZW5kZXJVc2VyLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyB1c2VyUmVwb3NpdG9yeSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBbXTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSAncmVzdWx0cz0yMCZuYXQ9dXMsZnImaW5jPW5hbWUscGljdHVyZSxsb2NhdGlvbixlbWFpbCxwaG9uZSc7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YSgnaHR0cHM6Ly9yYW5kb211c2VyLm1lL2FwaS8/JywgdGhpcy5vcHRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5wYXJzZShyZXN1bHQucmVzcG9uc2VUZXh0KS5yZXN1bHRzKTtcclxuICAgICAgICAgICAgdGhhdC5maWxsU3RvcmUoSlNPTi5wYXJzZShyZXN1bHQucmVzcG9uc2VUZXh0KS5yZXN1bHRzKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhhdC5zdG9yYWdlKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJVc2VyLnJlbmRlcih0aGF0LnN0b3JhZ2Vba2V5XSwgJ2NvbnRlbnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnN0b3JhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGxTdG9yZShkYXRhKSB7XHJcbiAgICAgICAgbGV0IHVzZXJNb2QgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgIHVzZXJNb2QgPSBuZXcgdXNlck1vZGVsKGtleSwgZGF0YVtrZXldLm5hbWUudGl0bGUsIGRhdGFba2V5XS5uYW1lLmZpcnN0LCBkYXRhW2tleV0ubmFtZS5sYXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtrZXldLmxvY2F0aW9uLmNpdHksIGRhdGFba2V5XS5waG9uZSwgZGF0YVtrZXldLmVtYWlsLCBkYXRhW2tleV0ubG9jYXRpb24uc3RyZWV0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFba2V5XS5sb2NhdGlvbi5zdGF0ZSwgZGF0YVtrZXldLnBpY3R1cmUubWVkaXVtLCBkYXRhW2tleV0ucGljdHVyZS5sYXJnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5wdXNoKHVzZXJNb2QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKHhocik7XHJcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihgTG9hZGluZyBlcnJvcmApKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codXJsICsgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwgKyBvcHRpb25zLCB0cnVlKTtcclxuICAgICAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VyQnlJZChpZCkge1xyXG4gICAgICAgIGlmKHRoaXMuaXNVc2VySWRFeGlzdChpZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVtpZF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlzVXNlcklkRXhpc3QoaWQpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RvcmFnZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yYWdlW2ldLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==
